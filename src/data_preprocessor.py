import pandas as pd
import csv
import os

path = os.getcwd()

def read_dataset(dataset_file: str):
    """ Read a dataset into a list and return.

    Args:
        dataset_file (str): path to the dataset file.

    Returns:
        list[dict]: a list of dataset rows.
    """
    result = []
    dataset_file = os.path.join(path, dataset_file)
    print(dataset_file)
    with open(dataset_file) as f:
        records = csv.DictReader(f)
        for row in records:
            result.append(row)
    return result

def write_dataset(dataset, dataset_file: str) -> bool:
    """ Writes a dataset to a csv file.

    Args:
        dataset: the data in list[dict] format
        dataset_file: str, the path to the csv file

    Returns:
        bool: True if succeeds.
    """
    assert len(dataset)>0, "The processed dataset is empty."
    keys = dataset[0].keys()
    dataset_file = os.path.join(path, dataset_file)
    with open(dataset_file, 'w', newline='')  as output_file:
        dict_writer = csv.DictWriter(output_file, keys)
        dict_writer.writeheader()
        dict_writer.writerows(dataset)
    return True

"""
1: Male
2: Female

1: Hispanic
2: Asian
3: White American
4: White European
6: African American
7: Middle Eastern
"""
def read_demographic():
    fields_d = ["SEQN","SDDSRVYR","RIDSTATR","GENDER","AGE","RIDAGEMN","RIDRETH1","RACE","RIDEXMON","RIDEXAGM","DMQMILIZ","DMQADFC","DMDBORN4","DMDCITZN","DMDYRSUS","DMDEDUC3","DMDEDUC2","DMDMARTL","RIDEXPRG","SIALANG","SIAPROXY","SIAINTRP","FIALANG","FIAPROXY","FIAINTRP","MIALANG","MIAPROXY","MIAINTRP","AIALANGA","DMDHHSIZ","DMDFMSIZ","DMDHHSZA","DMDHHSZB","DMDHHSZE","DMDHRGND","DMDHRAGE","DMDHRBR4","DMDHREDU","DMDHRMAR","DMDHSEDU","WTINT2YR","WTMEC2YR","SDMVPSU","SDMVSTRA","INDHHIN2","INDFMIN2","INDFMPIR"]
    file_path = os.path.join(path, 'dataset/demographic.csv')
    dataset = pd.read_csv(file_path, sep=",", names = fields_d, header = 0, usecols = ["SEQN","GENDER","AGE","RACE"])
    return dataset

"""
1: Regular
2: Irregular

BMI: (kg/m**2)
WEIGHT: kg
HEIGHT: cm
"""
def process_examination():
    fields_e = ["SEQN","PEASCST1","PEASCTM1","PEASCCT1","BPXCHR","BPAARM","BPACSZ","BPXPLS","PULSE","BPXPTY","BPXML1","BPXSY1","BPXDI1","BPAEN1","BPXSY2","BPXDI2","BPAEN2","BPXSY3","BPXDI3","BPAEN3","BPXSY4","BPXDI4","BPAEN4","BMDSTATS","WEIGHT","BMIWT","BMXRECUM","BMIRECUM","BMXHEAD","BMIHEAD","HEIGHT","BMIHT","BMI","BMDBMIC","BMXLEG","BMILEG","BMXARML","BMIARML","BMXARMC","BMIARMC","BMXWAIST","BMIWAIST","BMXSAD1","BMXSAD2","BMXSAD3","BMXSAD4","BMDAVSAD","BMDSADCM","MGDEXSTS","MGD050","MGD060","MGQ070","MGQ080","MGQ090","MGQ100","MGQ110","MGQ120","MGD130","MGQ90DG","MGDSEAT","MGAPHAND","MGATHAND","MGXH1T1","MGXH1T1E","MGXH2T1","MGXH2T1E","MGXH1T2","MGXH1T2E","MGXH2T2","MGXH2T2E","MGXH1T3","MGXH1T3E","MGXH2T3","MGXH2T3E","MGDCGSZ","OHDEXSTS","OHDDESTS","OHXIMP","OHX01TC","OHX02TC","OHX03TC","OHX04TC","OHX05TC","OHX06TC","OHX07TC","OHX08TC","OHX09TC","OHX10TC","OHX11TC","OHX12TC","OHX13TC","OHX14TC","OHX15TC","OHX16TC","OHX17TC","OHX18TC","OHX19TC","OHX20TC","OHX21TC","OHX22TC","OHX23TC","OHX24TC","OHX25TC","OHX26TC","OHX27TC","OHX28TC","OHX29TC","OHX30TC","OHX31TC","OHX32TC","OHX02CTC","OHX03CTC","OHX04CTC","OHX05CTC","OHX06CTC","OHX07CTC","OHX08CTC","OHX09CTC","OHX10CTC","OHX11CTC","OHX12CTC","OHX13CTC","OHX14CTC","OHX15CTC","OHX18CTC","OHX19CTC","OHX20CTC","OHX21CTC","OHX22CTC","OHX23CTC","OHX24CTC","OHX25CTC","OHX26CTC","OHX27CTC","OHX28CTC","OHX29CTC","OHX30CTC","OHX31CTC","OHX02CSC","OHX03CSC","OHX04CSC","OHX05CSC","OHX06CSC","OHX07CSC","OHX08CSC","OHX09CSC","OHX10CSC","OHX11CSC","OHX12CSC","OHX13CSC","OHX14CSC","OHX15CSC","OHX18CSC","OHX19CSC","OHX20CSC","OHX21CSC","OHX22CSC","OHX23CSC","OHX24CSC","OHX25CSC","OHX26CSC","OHX27CSC","OHX28CSC","OHX29CSC","OHX30CSC","OHX31CSC","OHX02SE","OHX03SE","OHX04SE","OHX05SE","OHX07SE","OHX10SE","OHX12SE","OHX13SE","OHX14SE","OHX15SE","OHX18SE","OHX19SE","OHX20SE","OHX21SE","OHX28SE","OHX29SE","OHX30SE","OHX31SE","CSXEXSTS","CSXEXCMT","CSQ245","CSQ241","CSQ260A","CSQ260D","CSQ260G","CSQ260I","CSQ260N","CSQ260M","CSQ270","CSQ450","CSQ460","CSQ470","CSQ480","CSQ490","CSXQUIPG","CSXQUIPT","CSXNAPG","CSXNAPT","CSXQUISG","CSXQUIST","CSXSLTSG","CSXSLTST","CSXNASG","CSXNAST","CSXTSEQ","CSXCHOOD","CSXSBOD","CSXSMKOD","CSXLEAOD","CSXSOAOD","CSXGRAOD","CSXONOD","CSXNGSOD","CSXSLTRT","CSXSLTRG","CSXNART","CSXNARG","CSAEFFRT"]
    indices = [fields_e.index("SEQN"), fields_e.index("PULSE"), fields_e.index("BMI"), fields_e.index("WEIGHT"), fields_e.index("HEIGHT")]
    labels = ["SEQN", "PULSE", "BMI", "WEIGHT", "HEIGHT"]
    dataset = read_dataset('dataset/examination.csv')
    new_dataset = []
    for row in dataset:
        new_row = {}
        if len(row['ï»¿"SEQN'].split(",")) > 1:
            seperated_row = row['ï»¿"SEQN'].split(",")
            for i in range(len(labels)):
                new_row[labels[i]] = seperated_row[indices[i]]
        else:
            new_row['SEQN'] = row['ï»¿"SEQN']
            for i in range(1, len(labels)):
                new_row[labels[i]] = row[labels[i]]
        new_dataset.append(new_row)
    write_dataset(new_dataset, 'dataset/examination_processed.csv')

def read_examination():
    labels = ["SEQN", "PULSE", "BMI", "WEIGHT", "HEIGHT"]
    file_path = os.path.join(path, 'dataset/examination_processed.csv')
    read_df = pd.read_csv(file_path, sep=",", names = labels, header = 0)
    return read_df

"""
Total Calcium: mg/dL
Cholestrol: mg/dL
Total protein: g/dL
Uric acid: mg/dL
Hemoglobin: g/dL
"""
def read_labs():
    fields_l = ["SEQN","URXUMA","URXUMS","URXUCR.x","URXCRS","URDACT","WTSAF2YR.x","LBXAPB","LBDAPBSI","LBXSAL","LBDSALSI","LBXSAPSI","LBXSASSI","LBXSATSI","LBXSBU","LBDSBUSI","LBXSC3SI","CALCIUM","LBDSCASI","CHOLESTEROL","LBDSCHSI","LBXSCK","LBXSCLSI","LBXSCR","LBDSCRSI","LBXSGB","LBDSGBSI","LBXSGL","LBDSGLSI","LBXSGTSI","LBXSIR","LBDSIRSI","LBXSKSI","LBXSLDSI","LBXSNASI","LBXSOSSI","LBXSPH","LBDSPHSI","LBXSTB","LBDSTBSI","PROTEIN","LBDSTPSI","LBXSTR","LBDSTRSI","URIC_ACID","LBDSUASI","LBXWBCSI","LBXLYPCT","LBXMOPCT","LBXNEPCT","LBXEOPCT","LBXBAPCT","LBDLYMNO","LBDMONO","LBDNENO","LBDEONO","LBDBANO","LBXRBCSI","HEMOGLOBIN","LBXHCT","LBXMCVSI","LBXMCHSI","LBXMC","LBXRDW","LBXPLTSI","LBXMPSI","URXUCL","WTSA2YR.x","LBXSCU","LBDSCUSI","LBXSSE","LBDSSESI","LBXSZN","LBDSZNSI","URXUCR.y","WTSB2YR.x","URXBP3","URDBP3LC","URXBPH","URDBPHLC","URXBPF","URDBPFLC","URXBPS","URDBPSLC","URXTLC","URDTLCLC","URXTRS","URDTRSLC","URXBUP","URDBUPLC","URXEPB","URDEPBLC","URXMPB","URDMPBLC","URXPPB","URDPPBLC","URX14D","URD14DLC","URXDCB","URDDCBLC","URXUCR","PHQ020","PHACOFHR","PHACOFMN","PHQ030","PHAALCHR","PHAALCMN","PHQ040","PHAGUMHR","PHAGUMMN","PHQ050","PHAANTHR","PHAANTMN","PHQ060","PHASUPHR","PHASUPMN","PHAFSTHR.x","PHAFSTMN.x","PHDSESN","LBDPFL","LBDWFL","LBDHDD","LBDHDDSI","LBXHA","LBXHBS","LBXHBC","LBDHBG","LBDHD","LBXHCR","LBXHCG","LBDHEG","LBDHEM","LBXHE1","LBXHE2","LBXGH","LBDHI","ORXGH","ORXGL","ORXH06","ORXH11","ORXH16","ORXH18","ORXH26","ORXH31","ORXH33","ORXH35","ORXH39","ORXH40","ORXH42","ORXH45","ORXH51","ORXH52","ORXH53","ORXH54","ORXH55","ORXH56","ORXH58","ORXH59","ORXH61","ORXH62","ORXH64","ORXH66","ORXH67","ORXH68","ORXH69","ORXH70","ORXH71","ORXH72","ORXH73","ORXH81","ORXH82","ORXH83","ORXH84","ORXHPC","ORXHPI","ORXHPV","LBDRPCR.x","LBDRHP.x","LBDRLP.x","LBDR06.x","LBDR11.x","LBDR16.x","LBDR18.x","LBDR26.x","LBDR31.x","LBDR33.x","LBDR35.x","LBDR39.x","LBDR40.x","LBDR42.x","LBDR45.x","LBDR51.x","LBDR52.x","LBDR53.x","LBDR54.x","LBDR55.x","LBDR56.x","LBDR58.x","LBDR59.x","LBDR61.x","LBDR62.x","LBDR64.x","LBDR66.x","LBDR67.x","LBDR68.x","LBDR69.x","LBDR70.x","LBDR71.x","LBDR72.x","LBDR73.x","LBDR81.x","LBDR82.x","LBDR83.x","LBDR84.x","LBDR89.x","LBDRPI.x","LBXHP2C","LBDRPCR.y","LBDRHP.y","LBDRLP.y","LBDR06.y","LBDR11.y","LBDR16.y","LBDR18.y","LBDR26.y","LBDR31.y","LBDR33.y","LBDR35.y","LBDR39.y","LBDR40.y","LBDR42.y","LBDR45.y","LBDR51.y","LBDR52.y","LBDR53.y","LBDR54.y","LBDR55.y","LBDR56.y","LBDR58.y","LBDR59.y","LBDR61.y","LBDR62.y","LBDR64.y","LBDR66.y","LBDR67.y","LBDR68.y","LBDR69.y","LBDR70.y","LBDR71.y","LBDR72.y","LBDR73.y","LBDR81.y","LBDR82.y","LBDR83.y","LBDR84.y","LBDR89.y","LBDRPI.y","WTSAF2YR.y","LBXIN","LBDINSI","PHAFSTHR.y","PHAFSTMN.y","URXUIO","WTSAF2YR","LBXTR","LBDTRSI","LBDLDL","LBDLDLSI","WTSH2YR.x","LBXIHG","LBDIHGSI","LBDIHGLC","LBXBGE","LBDBGELC","LBXBGM","LBDBGMLC","WTSOG2YR","LBXGLT","LBDGLTSI","GTDSCMMN","GTDDR1MN","GTDBL2MN","GTDDR2MN","GTXDRANK","PHAFSTHR","PHAFSTMN","GTDCODE","WTSA2YR.y","URXP01","URDP01LC","URXP02","URDP02LC","URXP03","URDP03LC","URXP04","URDP04LC","URXP06","URDP06LC","URXP10","URDP10LC","URXP25","URDP25LC","WTSA2YR","URXUP8","URDUP8LC","URXNO3","URDNO3LC","URXSCN","URDSCNLC","WTSB2YR.y","LBXPFDE","LBDPFDEL","LBXPFHS","LBDPFHSL","LBXMPAH","LBDMPAHL","LBXPFBS","LBDPFBSL","LBXPFHP","LBDPFHPL","LBXPFNA","LBDPFNAL","LBXPFUA","LBDPFUAL","LBXPFDO","LBDPFDOL","WTSB2YR","URXCNP","URDCNPLC","URXCOP","URDCOPLC","URXECP","URDECPLC","URXMBP","URDMBPLC","URXMC1","URDMC1LC","URXMEP","URDMEPLC","URXMHH","URDMHHLC","URXMHNC","URDMCHLC","URXMHP","URDMHPLC","URXMIB","URDMIBLC","URXMNP","URDMNPLC","URXMOH","URDMOHLC","URXMZP","URDMZPLC","LBXTC","LBDTCSI","LBXTTG","LBXEMA","WTSH2YR.y","LBXBPB","LBDBPBSI","LBDBPBLC","LBXBCD","LBDBCDSI","LBDBCDLC","LBXTHG","LBDTHGSI","LBDTHGLC","LBXBSE","LBDBSESI","LBDBSELC","LBXBMN","LBDBMNSI","LBDBMNLC","URXUTRI","URXUAS3","URDUA3LC","URXUAS5","URDUA5LC","URXUAB","URDUABLC","URXUAC","URDUACLC","URXUDMA","URDUDALC","URXUMMA","URDUMMAL","URXVOL1","URDFLOW1","URXVOL2","URDFLOW2","URXVOL3","URDFLOW3","URXUHG","URDUHGLC","URXUBA","URDUBALC","URXUCD","URDUCDLC","URXUCO","URDUCOLC","URXUCS","URDUCSLC","URXUMO","URDUMOLC","URXUMN","URDUMNLC","URXUPB","URDUPBLC","URXUSB","URDUSBLC","URXUSN","URDUSNLC","URXUSR","URDUSRLC","URXUTL","URDUTLLC","URXUTU","URDUTULC","URXUUR","URDUURLC","URXPREG","URXUAS","LBDB12","LBDB12SI"]
    file_path = os.path.join(path, 'dataset/labs.csv')
    dataset = pd.read_csv(file_path, sep=",", names = fields_l, header = 0, usecols = ["SEQN","CALCIUM","CHOLESTEROL","PROTEIN","URIC_ACID","HEMOGLOBIN"])
    return dataset